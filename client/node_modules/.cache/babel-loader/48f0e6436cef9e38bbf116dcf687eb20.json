{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nksni\\\\OneDrive\\\\Desktop\\\\Web Development\\\\React - udemy\\\\Project\\\\crwn-clothing\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React from \"react\";\nimport \"./shop.styles.scss\";\nimport { Route } from \"react-router-dom\";\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\nimport CollectionPage from \"../collection/collection.component\";\nimport { connect } from \"react-redux\";\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nimport { selectIsCollectionsFetching } from \"../../redux/shop/shop.selector\";\nimport { createStructuredSelector } from \"reselect\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n_c = CollectionsOverviewWithSpinner;\nconst CollectionsPageWithSpinner = WithSpinner(CollectionPage);\n_c2 = CollectionsPageWithSpinner;\n\nclass ShopPage extends React.Component {\n  componentDidMount() {// const { updateCollections } = this.props;\n    // const collectionRef = firestore.collection(\"collections\");\n    // collectionRef.get().then((snapShot) => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapShot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({ loading: false });\n    // });\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n    //   async (snapShot) => {\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapShot);\n    //     updateCollections(collectionsMap);\n    //     this.setState({ loading: false });\n    //   }\n    // );\n  }\n\n  render() {\n    const {\n      match,\n      isCollectionFetching\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${match.path}`,\n        render: props => /*#__PURE__*/_jsxDEV(CollectionsOverviewWithSpinner, {\n          isLoading: isCollectionFetching,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: `${match.path}/:collectionId`,\n        render: props => /*#__PURE__*/_jsxDEV(CollectionsPageWithSpinner, {\n          isLoading: isCollectionFetching,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionsFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CollectionsOverviewWithSpinner\");\n$RefreshReg$(_c2, \"CollectionsPageWithSpinner\");","map":{"version":3,"sources":["C:/Users/nksni/OneDrive/Desktop/Web Development/React - udemy/Project/crwn-clothing/src/pages/shop/shop.component.jsx"],"names":["React","Route","CollectionsOverview","CollectionPage","connect","fetchCollectionsStartAsync","selectIsCollectionsFetching","createStructuredSelector","WithSpinner","CollectionsOverviewWithSpinner","CollectionsPageWithSpinner","ShopPage","Component","componentDidMount","render","match","isCollectionFetching","props","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,0BAAT,QAA2C,+BAA3C;AACA,SAASC,2BAAT,QAA4C,gCAA5C;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,OAAOC,WAAP,MAAwB,sDAAxB;;AAEA,MAAMC,8BAA8B,GAAGD,WAAW,CAACN,mBAAD,CAAlD;KAAMO,8B;AACN,MAAMC,0BAA0B,GAAGF,WAAW,CAACL,cAAD,CAA9C;MAAMO,0B;;AAEN,MAAMC,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AACrCC,EAAAA,iBAAiB,GAAG,CAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkC,KAAKC,KAA7C;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE,QAAC,KAAD;AACE,QAAA,KAAK,MADP;AAEE,QAAA,IAAI,EAAG,GAAEF,KAAK,CAACG,IAAK,EAFtB;AAGE,QAAA,MAAM,EAAGD,KAAD,iBACN,QAAC,8BAAD;AACE,UAAA,SAAS,EAAED,oBADb;AAAA,aAEMC;AAFN;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,cADF,eAWE,QAAC,KAAD;AACE,QAAA,IAAI,EAAG,GAAEF,KAAK,CAACG,IAAK,gBADtB;AAEE,QAAA,MAAM,EAAGD,KAAD,iBACN,QAAC,0BAAD;AACE,UAAA,SAAS,EAAED,oBADb;AAAA,aAEMC;AAFN;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAuBD;;AA3CoC;;AA8CvC,MAAME,eAAe,GAAGZ,wBAAwB,CAAC;AAC/CS,EAAAA,oBAAoB,EAAEV;AADyB,CAAD,CAAhD;;AAIA,MAAMc,kBAAkB,GAAIC,QAAD,KAAe;AACxChB,EAAAA,0BAA0B,EAAE,MAAMgB,QAAQ,CAAChB,0BAA0B,EAA3B;AADF,CAAf,CAA3B;;AAIA,eAAeD,OAAO,CAACe,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CT,QAA7C,CAAf","sourcesContent":["import React from \"react\";\r\nimport \"./shop.styles.scss\";\r\nimport { Route } from \"react-router-dom\";\r\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\r\nimport CollectionPage from \"../collection/collection.component\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\r\nimport { selectIsCollectionsFetching } from \"../../redux/shop/shop.selector\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\r\n\r\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\r\nconst CollectionsPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\nclass ShopPage extends React.Component {\r\n  componentDidMount() {\r\n    // const { updateCollections } = this.props;\r\n    // const collectionRef = firestore.collection(\"collections\");\r\n    // collectionRef.get().then((snapShot) => {\r\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapShot);\r\n    //   updateCollections(collectionsMap);\r\n    //   this.setState({ loading: false });\r\n    // });\r\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\r\n    //   async (snapShot) => {\r\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapShot);\r\n    //     updateCollections(collectionsMap);\r\n    //     this.setState({ loading: false });\r\n    //   }\r\n    // );\r\n  }\r\n\r\n  render() {\r\n    const { match, isCollectionFetching } = this.props;\r\n    return (\r\n      <div className=\"shop-page\">\r\n        <Route\r\n          exact\r\n          path={`${match.path}`}\r\n          render={(props) => (\r\n            <CollectionsOverviewWithSpinner\r\n              isLoading={isCollectionFetching}\r\n              {...props}\r\n            />\r\n          )}\r\n        />\r\n        <Route\r\n          path={`${match.path}/:collectionId`}\r\n          render={(props) => (\r\n            <CollectionsPageWithSpinner\r\n              isLoading={isCollectionFetching}\r\n              {...props}\r\n            />\r\n          )}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  isCollectionFetching: selectIsCollectionsFetching,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\r\n"]},"metadata":{},"sourceType":"module"}